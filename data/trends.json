[
  {
    "Company":"Instagram",
    "Team":"5",
    "Wisdom":"Simplicity. Do'nt re-invent. SSL only at LB",
    "Scale":"100+ EC2 servers. 25+ Django servers. 12+12 DB servers.6 memcached servers. 200 python queue workers.",
    "OS":"Ubuntu",
    "DevOps":"Fabric, Vmtouch, Munin, StatsD,Pingdom, PagerDuty, Sentry, pgfouine, DogSlow",
    "Infrastructure":"AWS, ELB, Route53",
    "Storage":"XFS, S3,EBS",
    "CDN":"CloudFront",
    "Servers":"Gunicorn, NGinx, HAProxy",
    "Frontend":"Python",
    "Frameworks":"Django",
    "Caching":"Memcached",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"Redis",
    "DB":"PostgreSQL",
    "DB Sharding":"User ID",
    "Database Misc":"Pgbouncer",
    "Queues":"",
    "Search":"Solr",
    "Follow Graph":"Redis",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2012/4/9/the-instagram-architecture-facebook-bought-for-a-cool-billio.html"
  },
  {
    "Company":"Twitter",
    "Team":"",
    "Wisdom":"Test before you start, Tests will save your life. Denormalize a lot. Use messages to invalidate Cache. Cache everything. Build in limits. Partition day 1. Avoid complex joins and scans.",
    "Scale":"300 tweets/s . 3 queues to LB requests. 600 req/s, 200300 connections per second, MySQL handles 2400 requests/s, 180 rails instances, 1 big MySQL server, 30+ jobs processes, Rails SLA 200 ms, Avg DB time 50-100ms, 16gb of memcached. 90% requests are API.",
    "OS":"",
    "DevOps":"VIZ, Zipkin, Yourkit, JConsole, track realtime statistics, AWStats, Google Analytics",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Ruby",
    "Frameworks":"Rails",
    "Caching":"Memcached, Varnish",
    "Backend":"Scala",
    "Frameworks":"Finagle (author), Zookeeper, Thrift (author)",
    "DB Compliment/Cache":"Redis",
    "DB":"MySQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"Kestrel, drb/Jabber, Rinda",
    "Search":"",
    "Follow Graph":"Flock, Redis",
    "Big Data":"Storm (Author)",
    "Reference":"http://www.artima.com/scalazine/articles/twitter_on_scala.html http://gojko.net/2009/03/16/qcon-london-2009-upgrading-twitter-without-service-disruptions/ http://www.slideshare.net/Blaine/scaling-twitter"
  },
  {
    "Company":"NY Times",
    "Team":"",
    "Wisdom":"",
    "Scale":"200ms request SLA. Ea python websocket gateway supports 100k clients. 12 nodes Cassandra cluster across 2 regions. Cassandra for persistence and cache",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"AWS (Oregon, Dublin) Amazon Linux AMI. c1-m for retail,  MQ on c1-xl",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Python, Php",
    "Frameworks":"sockjs",
    "Caching":"Cassandra",
    "Backend":"Python, Java",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"Cassandra",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"RabbitMQ, Fabrik",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2014/1/13/nytimes-architecture-no-head-no-master-no-single-point-of-fa.html"
  },
  {
    "Company":"Hip Chat",
    "Team":"18",
    "Wisdom":"EBS 1TB data max. Couch uses 2x disk space during compaction. Riak search not baked, prefer ElasticSearch.",
    "Scale":"60 msg/s, 1.2B documents, 4TB EBS Raid, 26 frontend proxies, 52 backend app servers. 0.5TB search data. 75 AWS EC2 instances. 6 XMPP servers. Redis clustering pain.1B messages, 200gb RAM. AWS on 4 zones. 22gb of heap on 8 boxes for Java.",
    "OS":"Ubuntu",
    "DevOps":"Chef, Fabric, Capistrano, Bamboo, Sensu, Monit, PergerDuty, statsD, Graphite graphing.",
    "Infrastructure":"AWS",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Php",
    "Frameworks":"Twisted Python XMPP",
    "Caching":"Redis",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"CouchDB (Chat history, moving to ElasticSearch)",
    "DB":"MySQL (MariaDB for on premise)",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"German (queue), Curler (worker), Evaluating RabbitMQ",
    "Search":"Lucene (was), ElasticSearch",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2014/1/6/how-hipchat-stores-and-indexes-billions-of-messages-using-el.html"
  },
  {
    "Company":"ESPN",
    "Team":"24",
    "Wisdom":"Cache at page and fragment level. Multi-cache system. avoid TTL expiration.",
    "Scale":"#10 of all sites.100k req/s. Sports data XGb. 100s of logical DBs,150 apps on 100 servers. 100s of JVM per server.",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"F5 LB, Disney datacenter",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Java",
    "Frameworks":"",
    "Caching":"Ehcache (replicated per app server, DB trigger, changes pushed), Oracle eXtreme Scale",
    "Backend":"Java",
    "Frameworks":"Hibernate, EJB",
    "DB Compliment/Cache":"Hibernate caching, JPA Query replicator.",
    "DB":"Oracle, MS SQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"Oracle AQ, WebphereMQ, JMS",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html"
  },
  {
    "Company":"SalesForce",
    "Team":"",
    "Wisdom":"Multi-tenancy, Stateless, DB is System of Record, No DDL",
    "Scale":"1.3B daily transactions, 15k hw systems, 14GB heap per JVM. 8 node DB cluster. CUstomer sandbox have 4 node cluster. ACS curcor cache on dedicated 2 servers.",
    "OS":"Linux",
    "DevOps":"Puppet, Razor, Nagios, Perforace, Git, svn",
    "Infrastructure":"",
    "Storage":"22PB faw SAN storage, 5KSAN ports. QFS",
    "CDN":"",
    "Servers":"Jetty",
    "Frontend":"Python",
    "Frameworks":"",
    "Caching":"Memcached",
    "Backend":"Python, Perl",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"Oracle RAC",
    "DB Sharding":"OrgID partition, Creative Denormaization.",
    "Database Misc":"",
    "Queues":"Qpid",
    "Search":"Solr with 640GB Flash mem",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html http://www.infoq.com/presentations/SalesForce-Multi-Tenant-Architecture-Craig-Weissman"
  },
  {
    "Company":"Yelp",
    "Team":"",
    "Wisdom":"if doing something clever, its wrong.",
    "Scale":"102m monthly uniq visitors.",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"AWS",
    "Storage":"S3",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"Shard based on account ID",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"AWS Elastic MapReduce, Hadoop",
    "Reference":"http://highscalability.com/blog/2012/1/9/the-etsy-saga-from-silos-to-happy-to-billions-of-pageviews-a.html"
  },
  {
    "Company":"Etsy",
    "Team":"From Flickr",
    "Wisdom":"QA is done by developers. Ea. Dev on support call 1wk/yr. Always 1Ops/1Dev on call. 1d/wk for schema change. Let Dev code SQL avoid DBA dependency.",
    "Scale":"2B page views/mo",
    "OS":"CentOS",
    "DevOps":"Chef, statsD (authored)",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Php (was Python)",
    "Frameworks":"",
    "Caching":"",
    "Backend":"Php (was Python)",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"MySQL (was PostgreSQL)",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2012/1/9/the-etsy-saga-from-silos-to-happy-to-billions-of-pageviews-a.html"
  },
  {
    "Company":"Facebook",
    "Team":"",
    "Wisdom":"PODs of DB, Webapps",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Php",
    "Frameworks":"Hiphop VM",
    "Caching":"",
    "Backend":"Java",
    "Frameworks":"Thrift",
    "DB Compliment/Cache":"",
    "DB":"MySQL",
    "DB Sharding":"Zookeeper",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"Hadoop, HBase (Rejected Cassandra), Scribe for logs, Ptail reads data in.",
    "Reference":"http://highscalability.com/blog/2011/5/17/facebook-an-example-canonical-architecture-for-scaling-billi.html"
  },
  {
    "Company":"SoundCloud",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"Google",
    "Team":"",
    "Wisdom":"",
    "Scale":"TBs of data on 1000 machines",
    "OS":"Linux",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"GFS",
    "CDN":"",
    "Servers":"",
    "Frontend":"Python",
    "Frameworks":"",
    "Caching":"",
    "Backend":"Java, C++",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"MapReduce, BigTable",
    "Reference":""
  },
  {
    "Company":"NetFlix",
    "Team":"",
    "Wisdom":"Unit Test everything",
    "Scale":"33% of al US internet traffic, 10s of 1000s of instances",
    "OS":"",
    "DevOps":"vmstat, dstat, mpstat, top, atop, htop, nmon, iostat, sar, uptime, free, pidstat, ps, pstree, netstat, iptraf, ping, nicstat, ifconfig, pmap, pstack, jstack, iotop, tcpdump, wireshark, strace. Test Branch ()dev features, Release Branch (weekly release), Prod Branch (merge from Release, for daily patches), gcviz (author), Jenkins, Maven",
    "Infrastructure":"AWS",
    "Storage":"S3",
    "CDN":"",
    "Servers":"",
    "Frontend":"Java",
    "Frameworks":"Bootstrap, JQueryUI, D3, DataTables, FreeMarker, Pytheas (author), Guice, Jersey",
    "Caching":"Memcached, EVCache (author)",
    "Backend":"Clojure, Java, Python",
    "Frameworks":"Thrift, Zuul",
    "DB Compliment/Cache":"Cassandra (was simpleDB) for User Video Queue",
    "DB":"MySQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"Kafka, Suro",
    "Search":"ElasticSearch",
    "Follow Graph":"",
    "Big Data":"Pig, Hive, Hadoop, Storm",
    "Reference":"http://techblog.netflix.com/ http://www.slideshare.net/RuslanMeshenberg/svc-202netflixopensource http://www.slideshare.net/RuslanMeshenberg/arc305-how-netflix-leverages-multiple-regions-to-increase-availability-an-isthmus-and-activeactive-case-study http://techblog.netflix.com/2013/12/announcing-suro-backbone-of-netflixs.html http://techblog.netflix.com/2013/08/deploying-netflix-api.html http://techblog.netflix.com/2013/05/garbage-collection-visualization.html"
  },
  {
    "Company":"StackExchange/Overflow",
    "Team":"45",
    "Wisdom":"Run in RAM.",
    "Scale":"10 servers in NY, 9 production servers.Overflow has more SSD and RAM for Lucene. Failover is read only. 60% peak for webservers not acceptable. SQL server - 13TB Ram, 20gb a day goes into SQL server. Create 1 table a day for stats.",
    "OS":"Linux",
    "DevOps":"Dashboard - 3 graphs: CPI, memory, network. Orion monitor. Google Anaytics. Nagios. Splunk for logs. Bind for DNS, Pingdom.",
    "Infrastructure":"Peer1. Don't trust AWS. 3x more expensive. Expect 5 yrs from each computer. AWS has random network latency issues.",
    "Storage":"",
    "CDN":"CDN helps 80% of the way with international customers.",
    "Servers":"HAProxy, Bacula",
    "Frontend":"C#",
    "Frameworks":"Razor, jQuery",
    "Caching":"Redis",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"Redis as shared state cache between 10 servers.",
    "DB":"MS SQL Server. 40% read, 60% write.",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"Lucene",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://blog.serverfault.com/ http://highscalability.com/blog/2011/10/24/stackexchange-architecture-updates-running-smoothly-amazon-4.html http://highscalability.com/blog/2011/3/3/stack-overflow-architecture-update-now-at-95-million-page-vi.html"
  },
  {
    "Company":"AirBnB",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"Tumblr",
    "Team":"20",
    "Wisdom":"Light Scrum, Automate everything. MySQL/Sharding scales - apps dont, Select a stack that will help you hire the people you need. Read.",
    "Scale":"40k req/s, 1TB into Hadoop, 500m page views. 500 web servers with Apache and Php, 200 DB servers, 47 pools, 30 shards, 30 memcached servers, 22 redis servers w/8-32 instances each, 15 varnish servers, 25 HAProxy nodes, 8 NGinx, 14 queue servers",
    "OS":"Linux",
    "DevOps":"Git, Capistrano, Puppet, jenkins, preconfigued Dev machines updated via puppet. Vim and Textmate, Code Reviews",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"HAProxy (front end), NGinx",
    "Frontend":"Php, Ruby",
    "Frameworks":"Moved from Handlebars and Prototype to Jquery and underscore",
    "Caching":"Varnish (blogs), Memcached (moving to redis)",
    "Backend":"Scala (was Php), some Clojure",
    "Frameworks":"Finagle, Thrift, Func (author), Zookeeper",
    "DB Compliment/Cache":"Redis (also for queues)",
    "DB":"MySQL (NOT replacing with HBase, Feel it can scale just as well as MongoDB)",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"Kafka, Gearman, Kestrel",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"HBase",
    "Reference":"http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html http://engineering.tumblr.com/"
  },
  {
    "Company":"Pinterest",
    "Team":"40",
    "Wisdom":"Shard if project will have few TB",
    "Scale":"180 web engines, 240 API engines, 88 MySQL DB(cc2.8xlarge) +1 slave, 110 Redis, 200 memcached instances, 4 Redis Task Managers, 80 Task processors, Shareded Solr",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"AWS, Akamai, Level3",
    "Storage":"",
    "CDN":"CloudFront",
    "Servers":"NGinx",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"Memcached (mature, simple, nver crashes)",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"Redis (not mature, but goodm variety of data structures, persistence and replication) ",
    "DB":"MySQL (very mature, never crashed for them)",
    "DB Sharding":"CLUSTERING - Membase and Cassandra (clustering, automatic, no single point of failure, load balancing but not matrure, hard to find engineers, scary upgrades, complex) SHARDING - manual distribution, can split DB for capacity, high availability, load balancing, simpler. ",
    "Database Misc":"XtraBackup, Innotop, Maatkit, Percona supprt",
    "Queues":"Redis",
    "Search":"Solr (Doesnt scale past one box, easy to setup, now using http://websolr.com ) ElasticSearch gave trouble with small documents and lots of queries",
    "Follow Graph":"",
    "Big Data":"HBase",
    "Reference":"http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html"
  },
  {
    "Company":"Yahoo",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"Khan Academy",
    "Team":"5",
    "Wisdom":"",
    "Scale":"6mil users a month",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"Google Apps (more automatic scalaingvs AWS, nneds manual effort)",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Php",
    "Frameworks":"Processing.js",
    "Caching":"",
    "Backend":"Python",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2013/4/1/khan-academy-checkbook-scaling-to-6-million-users-a-month-on.html"
  },
  {
    "Company":"DuckDuckGo",
    "Team":"Asana (pm), Hipchat, Yammer10-15 FT, 20-25 contrib, 50% FT remote",
    "Wisdom":"",
    "Scale":"30m searches in 2/12. 12m API requests a day., 1m searches a day. Each dev gets medium instance. Use m2.xlarge for caching, 100gb shared across multiple instances. No master cache, relicated on all.",
    "OS":"Ubuntu",
    "DevOps":"Perl, ServerDensity (monitoring), daemontools, git",
    "Infrastructure":"AWS, Global Traffic Director for LB. Dont trust EBS",
    "Storage":"S3, Berkley DB",
    "CDN":"",
    "Servers":"NGinx, FastCGI",
    "Frontend":"Perl, Javascript, Node.js",
    "Frameworks":"YUI (moving to jQuery)",
    "Caching":"Memcached. Cache rate is 50%",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"Bucardo (pgSQL replication)",
    "DB":"PostgreSQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"Solr, Perl",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"https://duck.co/help/company/architecture http://highscalability.com/blog/2013/1/28/duckduckgo-architecture-1-million-deep-searches-a-day-and-gr.html"
  },
  {
    "Company":"TripAdvisor",
    "Team":"Dev works across entire stack. simple and deploy often. Release process is shared + rotated among various senior Eng and EM.\ntesting -Unit, Functional, Load, Smoke, Selenium, Load, and a test lab. reviews: Design Review, Code Review, Deployment Review, Operational Review",
    "Wisdom":"",
    "Scale":"80 front ends, 52 back ends - each with 24 cores. 12 moderate servers for memcached",
    "OS":"",
    "DevOps":"cacti, nagios, custom, php, ruby, python, perl, svn",
    "Infrastructure":"AWS, ELB (See cost analysis in link)",
    "Storage":"",
    "CDN":"",
    "Servers":"NGinx, Tomcat",
    "Frontend":"Java",
    "Frameworks":"Velocity",
    "Caching":"Memcached",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"Lucene",
    "Follow Graph":"",
    "Big Data":"Hadoop",
    "Reference":"http://highscalability.com/blog/2012/10/2/an-epic-tripadvisor-update-why-not-run-on-the-cloud-the-gran.html"
  },
  {
    "Company":"YouPorn",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"Syslogn",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"NGinx (web server), HAProxy for LB, Varnish (rev Proxy)",
    "Frontend":"Php (was Perl)",
    "Frameworks":"Symfony2, http://www.doctrine-project.org/ for CMS",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"Redis",
    "DB":"MySQL (feeds Redis)",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"ActiveMQ",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"YouTube",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"LinkedIn",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"svn, Hudson, ship code twice a week, ones every 2 wks for major features.",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Ruby, Node.JS",
    "Frameworks":"Backbone.js, Dust.js (was YUI), Sass, PhantomJS",
    "Caching":"",
    "Backend":"Java, Scala",
    "Frameworks":"Spring",
    "DB Compliment/Cache":"",
    "DB":"MySQL, Voldemort (Like DynamoDB), Expresso",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"Kafka (author)",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"hadoop",
    "Reference":"http://engineering.linkedin.com/technology"
  },
  {
    "Company":"Cheap",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"Dropbox",
    "Storage":"S3",
    "CDN":"",
    "Servers":"Github",
    "Frontend":"Jekyll",
    "Frameworks":"Disqus",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"Bing",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2011/8/22/strategy-run-a-scalable-available-and-cheap-static-site-on-s.html"
  },
  {
    "Company":"New Relic",
    "Team":"30 for 10k customers.",
    "Wisdom":"Trendy != Reliable.",
    "Scale":"",
    "OS":"Linux",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"NGinx, Jetty",
    "Frontend":"Ruby",
    "Frameworks":"Rails",
    "Caching":"",
    "Backend":"Java (was Ruby, not performant)",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"MySQL (Percona build)",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2011/7/18/new-relic-architecture-collecting-20-billion-metrics-a-day.html"
  },
  {
    "Company":"EverNote",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"Debian",
    "DevOps":"Zabbix, Opsview, AlertSite, Puppet, http://graphite.wikidot.com/, collectD",
    "Infrastructure":"BGP for DNS, Vyatta LB thru Level3",
    "Storage":"",
    "CDN":"",
    "Servers":"Tomcat",
    "Frontend":"",
    "Frameworks":"GWT, prototype, JQuery",
    "Caching":"EHCache",
    "Backend":"Java",
    "Frameworks":"Hibernate, EJB3, Thrift",
    "DB Compliment/Cache":"",
    "DB":"MySQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"Lucene",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://blog.evernote.com/tech/2011/05/17/architectural-digest/ http://blog.evernote.com/tech/page/2/"
  },
  {
    "Company":"Disqus",
    "Team":"",
    "Wisdom":"",
    "Scale":"17,000 req/s, 100 servers, 30% web. 10% DB, 25% cache, 20% LB, 15% utility",
    "OS":"",
    "DevOps":"Python, Hudson",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"Apache + mod_wsgi, HAProxy",
    "Frontend":"Python",
    "Frameworks":"Django",
    "Caching":"memcached",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"PostgreSQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2010/10/26/scaling-disqus-to-75-million-comments-and-17000-rps.html  http://www.slideshare.net/zeeg/djangocon-2010-scaling-disqus"
  },
  {
    "Company":"Reddit",
    "Team":"",
    "Wisdom":"Seperation of services, open schema, STATELESS, Memcache everything (store more data now in Memcachedb than Postgres)",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"AWS",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"memcached",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"Cassandra (votes)",
    "DB":"PostgreSQL (most data)",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2010/5/17/7-lessons-learned-while-building-reddit-to-270-million-page.html  http://www.reddit.com/#Whattechnologydoesreddituse"
  },
  {
    "Company":"eBay",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"Node.js",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"MongoDB",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://www.technology-ebay.de/the-teams/mobile-de/blog/mapping-bigdecimals-with-morphia-for-mongodb.html http://www.ebaytechblog.com/2013/05/17/how-we-built-ebays-first-node-js-application/ http://www.mongodb.com/presentations/storing-ebays-media-metadata-mongodb-0 http://www.mongodb.com/presentations/mongodb-ebay"
  },
  {
    "Company":"MetLife",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"MongoDB",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://www.mongodb.org/about/production-deployments/"
  },
  {
    "Company":"Stripe",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"MongoDB",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://www.mongodb.org/about/production-deployments/"
  },
  {
    "Company":"ServerDensity",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"MongoDB",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://www.mongodb.org/about/production-deployments/"
  },
  {
    "Company":"FourSquare",
    "Team":"",
    "Wisdom":"Cache and LB across a cluster. Design scalable upfront., Release early and often",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"AWS",
    "Storage":"Isilon Cluster",
    "CDN":"",
    "Servers":"Tomcat",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"Java, Scala",
    "Frameworks":"Finagle, Zookeeper, Thrift",
    "DB Compliment/Cache":"Oracle MemoryGrid",
    "DB":"MongoDB",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/blog/2010/10/15/troubles-with-sharding-what-can-we-learn-from-the-foursquare.html http://nosql.mypopescu.com/post/1265191137/foursquare-mongodb-outage-post-mortem"
  },
  {
    "Company":"Flickr",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":"http://highscalability.com/flickr-architecture"
  },
  {
    "Company":"BaseCamp",
    "Team":"",
    "Wisdom":"",
    "Scale":"30 servers, 8CPU ea, = 100 CPU 200gb of Ram",
    "OS":"Linux",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"S3",
    "CDN":"",
    "Servers":"HAProxy, Apache, Mongrel",
    "Frontend":"Ruby",
    "Frameworks":"Rails (author)",
    "Caching":"memcached",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"MySQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"Digg",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"K12",
    "Team":"",
    "Wisdom":"",
    "Scale":"65,000/req/min - for main server, 3m visits per day, 400000 unique visitors a day",
    "OS":"Linux",
    "DevOps":"Jenkins, VMWare",
    "Infrastructure":"",
    "Storage":"NAS",
    "CDN":"",
    "Servers":"Tomcat, Apache",
    "Frontend":"Java",
    "Frameworks":"Struts, Seam, SpringMVC",
    "Caching":"",
    "Backend":"Java",
    "Frameworks":"SpringMVC, Hibernate, myBatis",
    "DB Compliment/Cache":"",
    "DB":"Oracle",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"JMS",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"Oracle BI",
    "Reference":""
  },
  {
    "Company":"Alexander Street Press",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"Basecamp",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"Tomcat, Apache",
    "Frontend":"Php",
    "Frameworks":"Drupal, Composer, Symfony, Twig, RespondJS,jQuery 1.4.4, BackboneJS, YUI, StealJS, jsMVC, Formalize",
    "Caching":"",
    "Backend":"Java",
    "Frameworks":"Cocoon (HTML from XML)",
    "DB Compliment/Cache":"",
    "DB":"MySQL",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"Solr",
    "Follow Graph":"",
    "Big Data":"Zookeeper",
    "Reference":""
  },
  {
    "Company":"Heroku",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"Groupon",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"",
    "Storage":"",
    "CDN":"",
    "Servers":"",
    "Frontend":"",
    "Frameworks":"",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"Storm",
    "Reference":""
  },
  {
    "Company":"Intuit TurboTax",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"AWS",
    "Storage":"",
    "CDN":"CloudFront",
    "Servers":"Apache, Coyote",
    "Frontend":"JSP",
    "Frameworks":"Angular, JSquery, Modernizer, SCSS",
    "Caching":"",
    "Backend":"",
    "Frameworks":"",
    "DB Compliment/Cache":"",
    "DB":"",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  },
  {
    "Company":"rocket.im",
    "Team":"",
    "Wisdom":"",
    "Scale":"",
    "OS":"",
    "DevOps":"",
    "Infrastructure":"AWS",
    "Storage":"S3",
    "CDN":"",
    "Servers":"NGinx",
    "Frontend":"Node.js (express, faye, knox, async, underscore, mongoose, redis) did not like socket.io and sockjs",
    "Frameworks":"Backbone, requireJS, jQuery",
    "Caching":"",
    "Backend":"App/pubsub/worker/upload worker/mission control",
    "Frameworks":"",
    "DB Compliment/Cache":"Redis",
    "DB":"MongoDB",
    "DB Sharding":"",
    "Database Misc":"",
    "Queues":"",
    "Search":"",
    "Follow Graph":"",
    "Big Data":"",
    "Reference":""
  }
]
